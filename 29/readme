1. Разворачиваем стенд
vagrant up


2. Подключаемся к master, смотрим базы, создаем тестовую
vargant ssh master

[root@master ~]# su - postgres
-bash-4.2$ psql 
psql (11.8)
Type "help" for help.

postgres=# \l
                                  List of databases
   Name    |  Owner   | Encoding |   Collate   |    Ctype    |   Access privileges   
-----------+----------+----------+-------------+-------------+-----------------------
 postgres  | postgres | UTF8     | en_US.UTF-8 | en_US.UTF-8 | 
 template0 | postgres | UTF8     | en_US.UTF-8 | en_US.UTF-8 | =c/postgres          +
           |          |          |             |             | postgres=CTc/postgres
 template1 | postgres | UTF8     | en_US.UTF-8 | en_US.UTF-8 | =c/postgres          +
           |          |          |             |             | postgres=CTc/postgres
(3 rows)

postgres=# create database test;
CREATE DATABASE
postgres=# \l
                                  List of databases
   Name    |  Owner   | Encoding |   Collate   |    Ctype    |   Access privileges   
-----------+----------+----------+-------------+-------------+-----------------------
 postgres  | postgres | UTF8     | en_US.UTF-8 | en_US.UTF-8 | 
 template0 | postgres | UTF8     | en_US.UTF-8 | en_US.UTF-8 | =c/postgres          +
           |          |          |             |             | postgres=CTc/postgres
 template1 | postgres | UTF8     | en_US.UTF-8 | en_US.UTF-8 | =c/postgres          +
           |          |          |             |             | postgres=CTc/postgres
 test      | postgres | UTF8     | en_US.UTF-8 | en_US.UTF-8 | 
(4 rows)


3. Подключаемся к slave, смотрим базы, проверем реплицировалась ли тестовая
vargant ssh slave

[root@slave ~]# su - postgres
-bash-4.2$ psql 
psql (11.8)
Type "help" for help.

postgres=# \l
                                  List of databases
   Name    |  Owner   | Encoding |   Collate   |    Ctype    |   Access privileges   
-----------+----------+----------+-------------+-------------+-----------------------
 postgres  | postgres | UTF8     | en_US.UTF-8 | en_US.UTF-8 | 
 template0 | postgres | UTF8     | en_US.UTF-8 | en_US.UTF-8 | =c/postgres          +
           |          |          |             |             | postgres=CTc/postgres
 template1 | postgres | UTF8     | en_US.UTF-8 | en_US.UTF-8 | =c/postgres          +
           |          |          |             |             | postgres=CTc/postgres
 test      | postgres | UTF8     | en_US.UTF-8 | en_US.UTF-8 | 
(4 rows)


4. Подключаемся к backup, проверяем barman
vargant ssh backup

[root@backup ~]# barman switch-xlog --force --archive master
The WAL file 000000010000000000000003 has been closed on server 'master'
Waiting for the WAL file 000000010000000000000003 from server 'master' (max: 30 seconds)
Processing xlog segments from file archival for master
	000000010000000000000003

[root@backup ~]# barman check master
Server master:
	PostgreSQL: OK
	superuser or standard user with backup privileges: OK
	PostgreSQL streaming: OK
	wal_level: OK
	replication slot: OK
	directories: OK
	retention policy settings: OK
	backup maximum age: OK (no last_backup_maximum_age provided)
	compression settings: OK
	failed backups: OK (there are 0 failed backups)
	minimum redundancy requirements: OK (have 0 backups, expected at least 0)
	pg_basebackup: OK
	pg_basebackup compatible: OK
	pg_basebackup supports tablespaces mapping: OK
	systemid coherence: OK (no system Id stored on disk)
	pg_receivexlog: OK
	pg_receivexlog compatible: OK
	receive-wal running: OK
	archive_mode: OK
	archive_command: OK
	continuous archiving: OK
	archiver errors: OK

[root@backup ~]# barman backup master
Starting backup using postgres method for server master in /var/lib/barman/master/base/20200726T102450
Backup start at LSN: 0/4000140 (000000010000000000000004, 00000140)
Starting backup copy via pg_basebackup for 20200726T102450
Copy done (time: 3 seconds)
Finalising the backup.
This is the first backup for server master
WAL segments preceding the current backup have been found:
	000000010000000000000001 from server master has been removed
	000000010000000000000002 from server master has been removed
	000000010000000000000002.00000028.backup from server master has been removed
	000000010000000000000003 from server master has been removed
Backup size: 30.0 MiB
Backup end at LSN: 0/6000000 (000000010000000000000005, 00000000)
Backup completed (start time: 2020-07-26 10:24:50.077560, elapsed time: 4 seconds)
Processing xlog segments from streaming for master
	000000010000000000000004
Processing xlog segments from file archival for master
	000000010000000000000004
	000000010000000000000005
	000000010000000000000005.00000028.backup

[root@backup ~]# barman status master
Server master:
	Description: PostgreSQL Backup
	Active: True
	Disabled: False
	PostgreSQL version: 11.8
	Cluster state: in production
	pgespresso extension: Not available
	Current data size: 30.2 MiB
	PostgreSQL Data directory: /var/lib/pgsql/11/data
	Current WAL segment: 000000010000000000000006
	PostgreSQL 'archive_command' setting: barman-wal-archive backup master %p
	Last archived WAL: 000000010000000000000005.00000028.backup, at Sun Jul 26 10:24:53 2020
	Failures of WAL archiver: 9 (000000010000000000000001 at Sun Jul 26 10:05:50 2020)
	Server WAL archiving rate: 16.64/hour
	Passive node: False
	Retention policies: not enforced
	No. of available backups: 1
	First available backup: 20200726T102450
	Last available backup: 20200726T102450
	Minimum redundancy requirements: satisfied (1/0)

[root@backup ~]# barman list-backup master
master 20200726T102450 - Sun Jul 26 10:24:54 2020 - Size: 30.0 MiB - WAL Size: 0 B

[root@backup ~]# barman replication-status master
Status of streaming clients for server 'master':
  Current LSN on master: 0/60000C8
  Number of streaming clients: 2
  1. Async standby
     Application name: walreceiver
     Sync stage      : 5/5 Hot standby (max)
     Communication   : TCP/IP
     IP Address      : 192.168.100.20 / Port: 52642 / Host: -
     User name       : streaming_user
     Current state   : streaming (async)
     Replication slot: standby_slot
     WAL sender PID  : 7632
     Started at      : 2020-07-26 10:04:32.987154+00:00
     Sent LSN   : 0/60000C8 (diff: 0 B)
     Write LSN  : 0/60000C8 (diff: 0 B)
     Flush LSN  : 0/60000C8 (diff: 0 B)
     Replay LSN : 0/60000C8 (diff: 0 B)

  2. Async WAL streamer
     Application name: barman_receive_wal
     Sync stage      : 3/3 Remote write
     Communication   : TCP/IP
     IP Address      : 192.168.100.30 / Port: 56792 / Host: -
     User name       : barman_streaming_user
     Current state   : streaming (async)
     Replication slot: barman
     WAL sender PID  : 7664
     Started at      : 2020-07-26 10:07:02.663863+00:00
     Sent LSN   : 0/60000C8 (diff: 0 B)
     Write LSN  : 0/60000C8 (diff: 0 B)
     Flush LSN  : 0/6000000 (diff: -200 B)